@page "/product-management"
@attribute [Authorize(MyProductStorePermissions.Products.Default)]
@using MyProductStore.Permissions
@using MyProductStore.Products
@using Volo.Abp.Application.Dtos
@using Volo.Abp.AspNetCore.Components.Web.Theming.Layout

@inherits AbpCrudPageBase<IProductAppService,ProductDto,Guid,PagedAndSortedResultRequestDto,CreateProductDto,UpdateProductDto>

<PageHeader Title="Product Management" Toolbar="@Toolbar" />

<Card>
    <CardBody>
        <AbpExtensibleDataGrid 
            TItem="ProductDto"
            Data="Entities" 
            ReadData="OnDataGridReadAsync"
            TotalItems="TotalCount"    
            CurrentPage="CurrentPage"
            ShowPager="true"    
            PageSize="10"
            Columns="@ProductManagementTableColumns">
        </AbpExtensibleDataGrid>
    </CardBody>
</Card>


<Modal @ref="CreateModal">
    <ModalTitle>
        <h2>Create a new Product</h2>
    </ModalTitle>
    <ModalBody>
        <Form>
            <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                <Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:Name"]</FieldLabel>
                        <TextEdit @bind-Text="NewEntity.Name" Autofocus="true">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:Price"]</FieldLabel>
                        <NumericEdit @bind-Value="NewEntity.Price">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:IsAvailable"]</FieldLabel>
                        <Check @bind-Checked="NewEntity.IsAvailable">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Check>
                    </Field>
                </Validation>
            </Validations>
        </Form>
    </ModalBody>

    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
        <SubmitButton Clicked="@CreateEntityAsync" />
    </ModalFooter>
</Modal>

<Modal @ref="EditModal">
    <ModalTitle>
        <h2>Edit a Product</h2>
    </ModalTitle>
    <ModalBody>
        <Form>
            <Validations @ref="@CreateValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                <Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:Name"]</FieldLabel>
                        <TextEdit @bind-Text="EditingEntity.Name" Autofocus="true">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </TextEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:Price"]</FieldLabel>
                        <NumericEdit @bind-Value="EditingEntity.Price">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>
                <Validation>
                    <Field>
                        <FieldLabel>@L["DisplayName:IsAvailable"]</FieldLabel>
                        <Check @bind-Checked="EditingEntity.IsAvailable">
                            <Feedback>
                                <ValidationError />
                            </Feedback>
                        </Check>
                    </Field>
                </Validation>
            </Validations>
        </Form>
    </ModalBody>

    <ModalFooter>
        <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
        <SubmitButton Clicked="@UpdateEntityAsync" />
    </ModalFooter>
</Modal>